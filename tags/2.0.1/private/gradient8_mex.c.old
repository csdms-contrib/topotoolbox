// file: gradient8_mex.c
// steepest gradient
#include "mex.h"
#include "matrix.h"



void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
	mwSize nrow, ncol; // use mwIndex
	mwIndex ix, ixn, row, col, r, c;
	int coln[8] = {0, 1, 1, 1, 0, -1, -1, -1};
	int rown[8] = {-1, -1, 0, 1, 1, 1, 0, -1};
	double z, zn, g;
	double *cs;
	double *dem;
	double *G;
	double dist[8] = {1, sqrt(2), 1, sqrt(2), 1, sqrt(2), 1, sqrt(2) };

    
    if( nrhs > 2 || nlhs > 1 ) {
        mexErrMsgTxt("Need 2 inputs and no more than 1 output");
    }
    
    dem    = mxGetPr(prhs[0]);
	nrow   = mxGetM(prhs[0]);
	ncol   = mxGetN(prhs[0]);
	cs     = mxGetPr(prhs[1]);
	
	/* Create an m-by-n mxArray and either copy initial values into it or create a new one with ones*/
	plhs[0] = mxCreateDoubleMatrix((mwSize) nrow,(mwSize) ncol, mxREAL);
	/* pointer into drainage basins*/
	G       = mxGetPr(plhs[0]);
	
	// set cell distances
	for( ixn = 0; ixn < 8; ixn++) {
		dist[ixn] = cs[0] * dist[ixn];
	}
	

    for( row= 0; row<nrow; row++ ) {
	
		for( col= 0; col<ncol; col++) {
			
			ix = (col*nrow) + row;
			z = dem[ix];
			
			// nan?
			if (mxIsNaN(z)) {
				continue;
			}
		
			for ( ixn = 0; ixn < 8; ixn++ ) {
				// row index of neighbor
				r = row + rown[ixn];
				// column index of neighbor
				c = col + coln[ixn];
				
				// check if indices may be outside the grid 
				if (r < 0) { 
					continue;
				}
				if (r >= nrow) { 
					continue;
				}
				if (c < 0) { 
					continue;
				}
				if (c >= ncol) { 
					continue;
				}
				
				// calculate slope
				g = (z - dem[(c*nrow) + r])/ dist[ixn];
				// find maximum slope
				if ( g > G[ix] ) {
				   G[ix] = g;
				   }
			}
		}
		
    }
}